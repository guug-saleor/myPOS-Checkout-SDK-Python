from .Defines import Defines
from .IPC_Exception import IPC_Exception
import os, validators, json, base64

class Config():

    __privateKey = None
    __APIPublicKey = None
    __encryptPublicKey = None
    __keyIndex = None
    __sid = None
    __wallet = None
    __lang = 'en'
    __version = '1.4'
    __ipc_url = 'https://www.mypos.eu/vmp/checkout'
    __developerKey = None
    __source = None

    def __init__(self):
        self.__source = 'SDK_PY_' + Defines.SDK_VERSION

    def setPrivateKeyPath(self, path):
        if not os.path.exists(path):
            raise IPC_Exception('Private key not found in: {}'.format(path))

        with open(path, 'r+') as f:
            self.__privateKey = f.read()

        return self

    def getAPIPublicKey(self):
        return self.__APIPublicKey

    def setAPIPublicKey(self, key):
        self.__APIPublicKey = key
        return self

    def setAPIPublicKeyPath(self, path):
        if not os.path.exists(path):
            raise IPC_Exception('Public key not found in: {}'.format(path))

        with open(path, 'r+') as f:
            self.__APIPublicKey = f.read()

        return self

    def getEncryptPublicKey(self):
        return self.__encryptPublicKey

    def setEncryptPublicKey(self, key):
        self.__encryptPublicKey = key
        return self

    def setEncryptPublicKeyPath(self, path):
        if not os.path.exists(path):
            raise IPC_Exception('key not found in: {}'.format(path))

        with open(path, 'r+') as f:
            self.__encryptPublicKey = f.read()

        return self

    def getLang(self):
        return self.__lang

    def setLang(self, lang):
        self.__lang = lang
        return self

    def getDeveloperKey(self):
        return self.__developerKey

    def setDeveloperKey(self, key):
        self.__developerKey = key
        return self

    def getSource(self):
        return self.__source

    def setSource(self, src):
        self.__source = src
        return self

    def validate(self):
        k = self.getKeyIndex()
        if k==None:
            raise IPC_Exception('Invalid Key Index')
        else:
            try:
                float(k)
            except ValueError:
                raise IPC_Exception('Invalid Key Index')

        if not validators.url(self.getIpcURL()):
            raise IPC_Exception('Invalid IPC URL')

        try:
            float(self.getSid())
        except ValueError:
            raise IPC_Exception('Invalid SID')

        if not str(self.getWallet()).isnumeric():
            raise IPC_Exception('Invalid wallet number')

        if self.getVersion()==None:
            raise IPC_Exception('Invalid IPC Version')

        if not self.getPrivateKey():
            raise IPC_Exception('Invalid Private key')

        return True

    def getKeyIndex(self):
        return self.__keyIndex

    def setKeyIndex(self, ki):
        self.__keyIndex = ki
        return self

    def getIpcURL(self):
        return self.__ipc_url

    def setIpcURL(self, url):
        self.__ipc_url = url
        return self

    def getSid(self):
        return self.__sid

    def setSid(self, sid):
        self.__sid = sid
        return self

    def getWallet(self):
        return self.__wallet

    def setWallet(self, wlt):
        self.__wallet = wlt
        return self

    def getVersion(self):
        return self.__version

    def setVersion(self, ver):
        self.__version = ver
        return self

    def getPrivateKey(self):
        return self.__privateKey

    def setPrivateKey(self, key):
        self.__privateKey = key
        return self

    def loadConfigurationPackage(self, configPackage):
        decoded = base64.b64decode(configPackage)
        if not decoded:
            raise IPC_Exception('Invalid autogenerated data')

        data = json.loads(decoded)
        if not data:
            raise IPC_Exception('Invalid autogenerated data')

        for k, v in enumerate(data):
            if k=='sid':
                self.setSid(v)
            elif k=='cn':
                self.setWallet(v)
            elif k=='pk':
                self.setPrivateKey(v)
            elif k=='pc':
                self.setAPIPublicKey(v)
                self.setEncryptPublicKey(v)
            elif k=='idx':
                self.setKeyIndex(v)
            else:
                raise IPC_Exception('Unknown autogenerated authentication data parameter: '+k)

        return self